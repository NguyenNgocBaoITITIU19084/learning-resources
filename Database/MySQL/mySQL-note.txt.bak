* 3 principles to create a schema in MySQL
	- SMALL: lookup to your data and choose the smallest DATATYPE can hold all of your data,
less memory faster process
	- SIMPLE: if your data is string just use the string datatype to hold it
	- HONEST: data reflect from reality, if data have null column dont make column for null,
			if you know data range you need to define range for it
			
* DATATYPE:
		+-------------+----------------+-----------------+---------------+---------------+------------------+----------------+
		| 	DATATYPE  |	Storage(Bytes) |  Storeage(Bits) | MinimumSigned | MaximumSigned | Minimum Unsigned	| Maximum Signed |
		+-------------+----------------+-----------------+---------------+---------------+------------------+----------------+
		|	TINYINT	  |				  1|	            8|           -128|			  127|				   0|			  255|
		|	SMALLINT  |
		|	MEDIUMINT |
		|	INT		  |
		|	BIGINT	  |
		+-------------+----------------+-----------------+---------------+---------------+------------------+----------------+
		
* RANGE FOR INTEGER DATATYPE:
	TINYINT: it contains 1 byte (8 bits) means that 11111111 = 255 (positive bit) and 0 1111111= -127 (negative bit)
	SMALLINT: contains 2 bytes from 0 to 65535 and negative sign from -32768 to 32767 
	MEDIUMINT: contains 3 bytes from 0 to 16777251 and negative sign from -8388608 to 8388607 
	INT: contains 4 bytes from 0 to 4,294,967,295 and negative sign from -2147483648 to 2147483647
	BIGINT: contains 8 bytes from 0 to 18,446,744,073,709,551,615 and negative sign from  -9223372036854775808 to 9223372036854775807
	
* RANGE FOR DECIMALS DATATYPE:
	DECIMAL: a fixed-precision data type that stores exact value
	NUMERIC: same with DECIMAL 
	FLOAT: floating-point data type that stores approximate value
	DOUBLE: like float but store large and more precise value than FLOAT
* WHEN USE DECIMAL:
	- If you need to store the value require absolute precision such as currency and financial data
	- DECIMAL(10,2) there are 10 digits 2 digits after point 
* WHEN USE FLOAT or DOUBLE:
	- If you are using the scientific calculating data type
* NOTE FOR NUMERIC: 
	- All the numeric data types may have an extra option: UNSIGNED or ZEROFILL.
 If you add the UNSIGNED option, MySQL disallows negative values for the column.
 If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column.
 
 *STRING DATATYPE:
	* FIXED-LENGTH: fixed-length column are usually use for storing data that consistent size.
fixed length column are declared using the CHAR data type and require you to specify the column size.
No matter how many character are stored in fixed-length column, it will always occupy the full amount of 
space between.
	* VARIABLE-LENGTH: variable-length on the other hand, it does not have fixed-length.
The amount of space require depends on the data being stored in the column. Declaring by using VARCHAR.
The variable length do not occupy the full amount of space specify.
	+CHAR -- fixed-length:
	+VARCHAR -- variable-length:
	
* BINARY and VARBINARY: is look like CHAR and VARCHAR, but there is one thing different. CHAR and VARCHAR stores
the string data and follow character set and collations, the BINARY and VARBINARY stores the bytes only.
It provides efficient way to store binary data such as hashes or UUIDs.
	+BINARY -- fixed-length:
	+VARBINARY -- variable-length:
	
* TEXT and BLOB: TEXT is used to store the large amount of strings of text. It is important that 
the text column are not indexable(without using the full text index) and cannot be store full their value
It can index only a prefix of the columns or to sort by only the first few thousands of characters.

BLOB is used to store thelarge amount of binary data. It is also can store the image and audio file
, but we do not recommend it. It is good for store some third party and get store the link to 
that place using VARCHAR.

* NOTE TO KEEP IN MIND WHEN USING TEXT and BLOB:
	- Only select the column that you need: because of how large TEXT and BLOB column are stored
on the disk, it's best to only select them when you need them.
	- Do not index or sort entire column: Because of the size of TEXT and BLOB columns is very large.
you should only index or sort a prefix of the columns.
	- use VARCHAR columns for smaller amount of data: using the VARCHAR for a few hundred characters,
this can help with indexing and sorting.


	+TINYBLOB:
	+BLOB:
	+MEDIUMBLOB:
	+LONGBLOB(4 gigabytes of data):
	
	+TINYTEXT:
	+MEDIUMTEXT:
	+TEXT:
	+LONGTEXT(4 gigabytes of data):
	
* ENUM: look like a string but they are stored as integer. Enums give you the readability of a string
with the compact data type of an integer.
	SYNTAX:
		CREATE TABLE orders (
			id INT AUTO_INCREMENT PRIMARY KEY,
			size ENUM('extra small', 'small', 'medium', 'large', 'extra large')
		);
		INSERT INTO orders (size) VALUES (2), ('medium'), ('large');
		
	+ DISADVANTAGES:
		- If the bussiness requirement changes, and you need to add another to the allowable values,
you will have to alter the schema of your table to add a new enum.
		- when using sort, the mysql will sort the enum by integer, it can be make confusing.
		- it is important that integer enumm can be confusing and shuold be avoided if possible
		
* 	DATE DATE TYPE:
		+ DATE: only store date from 1000 to 9999
		+ DATETIME: store both date and time, it occupy 8 bytes to store, so it can up to 9999 year
		+ TIMESTAMP: store both date and time, but occupy only 4 byte to store, so the limitation from 1970 to 2038
		+ YEAR: store the year from 1901 to 2155
		+ TIME: using to store hour, minutes, seconds. it can store more than 24 hours.
this typre is useful for a 10-day range denominated in hours, minutes and second

* JSON DATA TYPE: 
	SYNTAX:
		CREATE TABLE has_json(
			id INT AUTO_INCREMENT PRIMARY KEY,
			json JSON NULL
		);
		
	* VALIDATION: mysql auto validation value which insert into db by json format
	INSERT INTO has_json (json) VALUES ('{"name": "baonguyen"}')
	
	* Get value of key:
		SELECT `json`->>"$.name" as name from has_json
	* INDEXING:
		- mysql allow to create index in specific key of object 
		
* GENERATED COLUMN:
	- Generate column is a column that is computed by an expression, rather than being explicitly stored
in the table. The idea is that you can define a column using a formula or calculation.
	Example:
		CREATE TABLE email(
			email varchar(255),
			domain varchar(255) AS (substring_index(email, @, -1))
		);
		
* VIRTUAL and STORED Column:
	- A virtual column is calculated at runtime and does not take up any space on disk. This mean that 
it take longer time to calculate and does not impact the overall size of data
	- STORED column is calculating data during insert or update and then save to disk
-> faster in retrieve column

***====================================*****========================================***
								INDEXES IN MYSQL
* B+ TREES: the algorithsm using for the indexes in the mysql is b+ tree algorithsm

***====================================*****========================================***
								MySQL Constraints
* PRIMARY KEY:
	- There is only one primary key in each table.
	- A primary key can contain a column or set of columns
	- A primary key is UNIQUE AND NOT NULL column
	- If primary key contains multiple of columns, the combination of values in these column must be
unique
	SYNTAX:
		CREATE TABLE has_columns(
			id bigint unsigned auto_increment primary key
		);
		
		CREATE TABLE has_columns(
			id bigint auto_increment,
			name varchar(255) not null
			primary key(id,name)
		);
	
	* Adding Primary Key to Existing Table:
		ALTER TABLE name 
		ADD Primary Key(id)
	* Removing Primary Key from Existing Table:
		ALTER TABLE name
		REMOVE Primary Key(id)

* FOREIGN KEY:
	- Foreign key is a column or group of column in table link to a column and group of column in another 
table.
	- A table can have many foreign key and each foreign key can link to primary key in another table.
	Example:
		  customer  				orders
		+---------+ 			  +-----------+
		|cus_id(pk)|			  |oder_id(pk)|
		| name    |  one to many  | cus_id(fk)|
		+---------+	 foreign key  +-----------+
		
	* Self-referencing foreign key:
	- The child table and parent table may refer to the same table.
	Example: 
		employee
	   +---------+
	   |id(PK)	 |  employee can send report to other employee in reportTO column or set null
	   |name	 |	each employee can have 0 or many report
	   |reportTo(FK)|
	   +---------+
	* SYNTAX:
		[CONSTRAINT constraint_name] // -> optional, automatically generated name
		FOREIGN KEY [foreign_key_name] (column_name, ...) // ->[foreign_key_name] optional
		REFERENCES parent_table(colunm_name,...)
		[ON DELETE reference_option] 
		[ON UPDATE reference_option]
	
* MySQL has five reference_options: 
	+ CASCADE: if the row from the parent table is deleted or updated, the values of the mactching rows in
child table are automatically deleted or updated.
	+ SET NULL: if the row from the parent table is deleted or updated, the values of the foreign key 
in child table are set to NULL
	+ RESTRICT: if a row in the parent table has a matching row in the child table, mySQL reject deleting
or updating rows in the parent table.
	+ NO ACTION: is the same as RETRICT
	+ SET DEFAULT: is recognized by the mySQL parser. However, this action is reject by both InnoDB and NDB table
	* EXAMPLE RESTRIC and NO ACTION:
		CREATE TABLE categories(
			categoryId INT AUTO_INCREMENT PRIMARY KEY, 
			categoryName VARCHAR(100) NOT NULL
		) ENGINE = INNODB;

		// mysql auto set RESTRICT when we do not set reference_optinal to ON UPDATE and ON DELETED
		CREATE TABLE products(
			productId INT AUTO_INCREMENT PRIMARY KEY, 
			productName VARCHAR(100) NOT NULL, 
			categoryId INT, 
			CONSTRAINT fk_category 
			FOREIGN KEY (categoryId) 
            REFERENCES categories(categoryId)
		) ENGINE = INNODB;

		INSERT INTO categories(categoryName)
			VALUES
			('Smartphone'),
			('Smartwatch');
		
		INSERT INTO products(productName, categoryId)
			VALUES('iPhone',1);
			
			// can not do that b/c there is no categoryId = 3
		INSERT INTO products(productName, categoryId)
			VALUES('iPad',3);
		
		// can not update or deleted parent table b/c RETRICT AND NO ACTION
		UPDATE categories
		SET categoryId = 100
		WHERE categoryId = 1;
		
	* EXAMPLE: CASCADE action
		CREATE TABLE products(
			productId INT AUTO_INCREMENT PRIMARY KEY,
			productName varchar(100) not null,
			categoryId INT NOT NULL,
			CONSTRAINT fk_category
			FOREIGN KEY (categoryId) 
			REFERENCES categories(categoryId)
				ON UPDATE CASCADE
				ON DELETE CASCADE
		) ENGINE=INNODB;
		
		INSERT INTO products(productName, categoryId)
		VALUES
			('iPhone', 1), 
			('Galaxy Note',1),
			('Apple Watch',2),
			('Samsung Galary Watch',2);

		UPDATE categories
		SET categoryId = 100
		WHERE categoryId = 1; // also update on products table and categories table because of CASCADE
		
		DELETE FROM categories
		WHERE categoryId = 2; // also delete on products table and categories table because of CASCADE
		
	* EMXAMPLE: SET NULL
		CREATE TABLE categories(
			categoryId INT AUTO_INCREMENT PRIMARY KEY,
			categoryName VARCHAR(100) NOT NULL
		)ENGINE=INNODB;

		CREATE TABLE products(
			productId INT AUTO_INCREMENT PRIMARY KEY,
			productName varchar(100) not null,
			categoryId INT,
			CONSTRAINT fk_category
			FOREIGN KEY (categoryId) 
			REFERENCES categories(categoryId)
				ON UPDATE SET NULL
				ON DELETE SET NULL 
		)ENGINE=INNODB;
		
		INSERT INTO categories(categoryName)
		VALUES
			('Smartphone'),
			('Smartwatch');
			
		INSERT INTO products(productName, categoryId)
		VALUES
			('iPhone', 1), 
			('Galaxy Note',1),
			('Apple Watch',2),
			('Samsung Galary Watch',2);
			
			UPDATE | DELETE categories
			SET categoryId = 100
			WHERE categoryId = 1; // update or delete the parent also set null value to the child 
			
	* Drop the FOREIGN KEY:
	ALTER TABLE table_name 
	DROP FOREIGN KEY constraint_name;
	
	* DISABLING THE FOREIGN KEY:
		- It is very useful to disable foreign key check, when you import data from csv file.
		- If you do not disable before import data you have to import data into parent table first
and then import into child table 

* UNIQUE CONSTRAINT:
	- The Unique constraint make sure that the value in the column of table is unique.
	SYNTAX:
		CREATE TABLE example(
			id int unsigned auto_increament primary key,
			email varchar(255) UNIQUE
		);
		
		CREATE TABLE table_name(
			column1 datatype,
			column2 datatype,
			...,
			UNIQUE(column1, column2)
		);
	NOTE:
		- Becarefull with null value, we can insert null value into UNIQUE column with out duplicated error
	* DROP A UNIQUE CONSTRAINT:
		SYNTAX: 
			DROP INDEX index_name ON table_name;
			ALTER TABLE table_name DROP INDEX index_name;
	* ADD UNIQUE CONSTRAIN INTO EXISTED TABLE:
		ALTER TABLE table_name
		ADD CONSTRAINT constraint_name 
		UNIQUE (column_list);
		
*	NOT NULL CONSTRAINT:
	- The NOT NULL constraint make sure that the value you store in the column is not null
	SYNTAX:
		CREATE TABLE has_example(
			id primary key,
			name NOT NULL
		);
	* Adding NOT NULL contrains into existed table:
		1. find all current row contains null value.
		2. update all null value.
		3. modify the column with not null contraint.
		EXAMPLE: 
			CREATE TABLE tasks (
				id INT AUTO_INCREMENT PRIMARY KEY,
				title VARCHAR(255) NOT NULL,
				start_date DATE NOT NULL,
				end_date DATE
			);
			
			INSERT INTO tasks(title ,start_date, end_date)
			VALUES('Learn MySQL NOT NULL constraint', '2017-02-01','2017-02-02'),
			('Check and update NOT NULL constraint to your database', '2017-02-01',NULL);
			
			// step 1:
			SELECT * FROM tasks 
			WHERE end_date IS NULL;
			
			//step 2:
			UPDATE tasks 
			SET end_date = start_date + 7
			WHERE end_date IS NULL;
			
			// step 3:
			ALTER TABLE tasks 
			CHANGE 
			end_date 
			end_date DATE NOT NULL;
	
	* Remove NOt NULL constraint:
		ALTER TABLE table_name
		MODIFY column_name column_definition;
		
* DEFAULT CONSTRAINT:
	- this constraint allow you specify the default value for the column
	- default value must be number or string 
	- default value can not be function or argument
	- when you insert new value you do not need to provide default value
	EXAMPLE:
		CREATE TABLE example(
			id int primary key,
			sales_tax DECIMAL(5,2) NOT NULL DEFAULT 0.1
		);
		
	* ADDING a DEFAULT to existed column:
	ALTER TABLE table_name
	ALTER COLUMN column_name SET DEFAULT default_value;
	