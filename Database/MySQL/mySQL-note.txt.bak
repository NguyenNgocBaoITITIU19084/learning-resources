* 3 principles to create a schema in MySQL
	- SMALL: lookup to your data and choose the smallest DATATYPE can hold all of your data
	- SIMPLE: if your data is string just use the string datatype to hold it
	- HONEST: data reflect from reality, if data have null column dont make column for null,
			if you know data range you need to define range for it
			
* DATATYPE:
		+-------------+----------------+-----------------+---------------+---------------+------------------+----------------+
		| 	DATATYPE  |	Storage(Bytes) |  Storeage(Bits) | MinimumSigned | MaximumSigned | Minimum Unsigned	| Maximum Signed |
		+-------------+----------------+-----------------+---------------+---------------+------------------+----------------+
		|	TINYINT	  |				  1|	            8|           -128|			  127|				   0|			  255|
		|	SMALLINT  |
		|	MEDIUMINT |
		|	INT		  |
		|	BIGINT	  |
		+-------------+----------------+-----------------+---------------+---------------+------------------+----------------+
		
* RANGE FOR INTEGER DATATYPE:
	TINYINT: it contains 1 byte (8 bits) means that 11111111 = 255 (positive bit) and 0 1111111= -127 (negative bit)
	SMALLINT: contains 2 bytes from 0 to 65535 and negative sign from -32768 to 32767 
	MEDIUMINT: contains 3 bytes from 0 to 16777251 and negative sign from -8388608 to 8388607 
	INT: contains 4 bytes from 0 to 4,294,967,295 and negative sign from -2147483648 to 2147483647
	BIGINT: contains 8 bytes from 0 to 18,446,744,073,709,551,615 and negative sign from  -9223372036854775808 to 9223372036854775807
	
* RANGE FOR DECIMALS DATATYPE:
	DECIMAL: a fixed-precision data type that stores exact value
	NUMERIC: same with DECIMAL 
	FLOAT: floating-point data type that stores approximate value
	DOUBLE: like float but store large and more precise value than FLOAT
* WHEN USE DECIMAL:
	- If you need to store the value require absolute precision such as currency and financial data
	- DECIMAL(10,2) there are 10 digits 2 digits after point 
* WHEN USE FLOAT or DOUBLE:
	- If you are using the scientific calculating data type
* NOTE FOR NUMERIC: 
	- All the numeric data types may have an extra option: UNSIGNED or ZEROFILL.
 If you add the UNSIGNED option, MySQL disallows negative values for the column.
 If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column.
 
 *STRING DATATYPE:
	* FIXED-LENGTH: fixed-length column are usually use for storing data that consistent size.
fixed length column are declared using the CHAR data type and require you to specify the column size.
No matter how many character are stored in fixed-length column, it will always occupy the full amount of 
space between.
	* VARIABLE-LENGTH: variable-length on the other hand, it does not have fixed-length.
The amount of space require depends on the data being stored in the column. Declaring by using VARCHAR.
The variable length do not occupy the full amount of space specify.
	+CHAR -- fixed-length:
	+VARCHAR -- variable-length:
	
* BINARY and VARBINARY: is look like CHAR and VARCHAR, but there is one thing different. CHAR and VARCHAR stores
the string data and follow character set and collations, the BINARY and VARBINARY stores the bytes only.
It provides efficient way to store binary data such as hashes or UUIDs.
	+BINARY -- fixed-length:
	+VARBINARY -- variable-length:
	
* TEXT and BLOB: TEXT is used to store the large amount of strings of text. It is important that 
the text column are not indexable(without using the full text index) and cannot be store full their value
It can index only a prefix of the columns or to sort by only the first few thousands of characters.

BLOB is used to store thelarge amount of binary data. It is also can store the image and audio file
, but we do not recommend it. It is good for store some third party and get store the link to 
that place using VARCHAR.

* NOTE TO KEEP IN MIND WHEN USING TEXT and BLOB:
	- Only select the column that you need: because of how large TEXT and BLOB column are stored
on the disk, it's best to only select them when you need them.
	- Do not index or sort entire column: Because of the size of TEXT and BLOB columns is very large.
you should only index or sort a prefix of the columns.
	- use VARCHAR columns for smaller amount of data: using the VARCHAR for a few hundred characters,
this can help with indexing and sorting.


	+TINYBLOB:
	+BLOB:
	+MEDIUMBLOB:
	+LONGBLOB(4 gigabytes of data):
	
	+TINYTEXT:
	+MEDIUMTEXT:
	+TEXT:
	+LONGTEXT(4 gigabytes of data):
	
* ENUM: look like a string but they are stored as integer. Enums give you the readability of a string
with the compact data type of an integer.
	SYNTAX:
		CREATE TABLE orders (
			id INT AUTO_INCREMENT PRIMARY KEY,
			size ENUM('extra small', 'small', 'medium', 'large', 'extra large')
		);
		INSERT INTO orders (size) VALUES (2), ('medium'), ('large');
		
	+ DISADVANTAGES:
		- If the bussiness requirement changes, and you need to add another to the allowable values,
you will have to alter the schema of your table to add a new enum.
		- when using sort, the mysql will sort the enum by integer, it can be make confusing.
		- it is important that integer enumm can be confusing and shuold be avoided if possible
		
* 	DATE DATE TYPE:
		+ DATE: only store date from 1000 to 9999
		+ DATETIME: store both date and time, it occupy 8 bytes to store, so it can up to 9999 year
		+ TIMESTAMP: store both date and time, but occupy only 4 byte to store, so the limitation from 1970 to 2038
		+ YEAR: store the year from 1901 to 2155
		+ TIME: using to store hour, minutes, seconds. it can store more than 24 hours.
this typre is useful for a 10-day range denominated in hours, minutes and second
	+SET: